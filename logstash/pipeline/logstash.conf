# Logstash Pipeline for ContextChain - Simplified and Stable
input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5001
    codec => json_lines
  }
  
  udp {
    port => 5001
    codec => json_lines
  }
}

filter {
  # Add basic metadata
  mutate {
    add_field => { "environment" => "contextchain" }
    add_field => { "project" => "cortext_redis" }
    add_field => { "ingested_at" => "%{@timestamp}" }
  }
  
  # Parse Docker container logs
  if [container] and [container][name] {
    mutate {
      add_field => { "container_name" => "%{[container][name]}" }
      add_tag => ["docker", "contextchain"]
    }
    
    # Tag by container type
    if [container][name] =~ /kafka/ {
      mutate { add_tag => ["kafka"] }
    }
    
    if [container][name] =~ /redis/ {
      mutate { add_tag => ["redis", "cortext_redis"] }
    }
    
    if [container][name] =~ /elasticsearch/ {
      mutate { add_tag => ["elasticsearch"] }
    }
    
    if [container][name] =~ /nginx/ {
      mutate { add_tag => ["nginx", "proxy"] }
    }
    
    if [container][name] =~ /logstash/ {
      mutate { add_tag => ["logstash"] }
    }
    
    if [container][name] =~ /kibana/ {
      mutate { add_tag => ["kibana"] }
    }
  }
  
  # Parse log levels from message
  if [message] =~ /ERROR/ {
    mutate { add_field => { "log_level" => "ERROR" } }
  } else if [message] =~ /WARN/ {
    mutate { add_field => { "log_level" => "WARN" } }
  } else if [message] =~ /INFO/ {
    mutate { add_field => { "log_level" => "INFO" } }
  } else if [message] =~ /DEBUG/ {
    mutate { add_field => { "log_level" => "DEBUG" } }
  } else {
    mutate { add_field => { "log_level" => "UNKNOWN" } }
  }
  
  # Clean up and enhance
  if [message] {
    mutate {
      strip => ["message"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["contextchain-elasticsearch:9200"]
    index => "contextchain-logs-%{+YYYY.MM.dd}"
    
    # Simple template management
    manage_template => true
    template_name => "contextchain-template"
    template_overwrite => true
  }
  
  # Console output for debugging
  stdout {
    codec => dots
  }
}

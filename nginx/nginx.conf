user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic Settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format upstream_time '$remote_addr - $remote_user [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent"'
                             'rt=$request_time uct="$upstream_connect_time" '
                             'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;

    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;

    # Main HTTP Server
    server {
        listen 80 default_server;
        server_name _;
        
        # Security Headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # Rate Limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn perip 10;

        # Health Check
        location /health {
            access_log off;
            return 200 "ContextChain Infrastructure - Healthy\n";
            add_header Content-Type text/plain;
        }

        # Default redirect to AKHQ
        location / {
            return 301 /akhq;
        }
    }
    
    # AKHQ Kafka UI
    server {
        listen 8080;
        server_name _;
        
        location / {
            proxy_pass http://contextchain-akhq:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffering off;
        }
    }
    
    # Kibana Dashboard
    server {
        listen 5601;
        server_name _;
        
        location / {
            proxy_pass http://contextchain-kibana:5601;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
    
    # Elasticsearch API
    server {
        listen 9200;
        server_name _;
        
        # API Rate Limiting
        limit_req zone=api burst=20 nodelay;
        
        location / {
            proxy_pass http://contextchain-elasticsearch:9200;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
    }
}

# Stream configuration for Redis TCP proxying
stream {
    log_format basic '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time "$upstream_addr"';

    access_log /var/log/nginx/redis_access.log basic;
    error_log /var/log/nginx/redis_error.log;

    # Redis Write Operations (Master only) - cortext_redis database
    upstream redis_write_stream {
        server contextchain-redis-master:6379 weight=1 max_fails=3 fail_timeout=30s;
    }

    # Redis Read Operations (Slave only) - cortext_redis database
    upstream redis_read_stream {
        server contextchain-redis-slave:6379 weight=1 max_fails=3 fail_timeout=30s;
    }

    # Redis Write Port (6379) - Master only for Write operations
    server {
        listen 6379;
        proxy_pass redis_write_stream;
        proxy_timeout 10s;
        proxy_connect_timeout 5s;
        proxy_bind off;
    }

    # Redis Read Port (6380) - Slave only for Read operations
    server {
        listen 6380;
        proxy_pass redis_read_stream;
        proxy_timeout 10s;
        proxy_connect_timeout 5s;
        proxy_bind off;
    }
}
